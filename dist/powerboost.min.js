
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global = globalThis;
    
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire7ea7"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire7ea7"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("c6odg", function(module, exports) {

$parcel$export(module.exports, "Editor", () => Editor);
class Editor {
    constructor(editor, outputDiv, runBtn){
        this.userCode = editor;
        this.outputDiv = document.getElementById(outputDiv);
        this.runBtn = document.getElementById(runBtn);
    }
    init() {
        this.runBtn.addEventListener("click", ()=>{
            this.runCode();
        });
    }
    runCode() {
        const outputDiv = this.outputDiv;
        const userCode = this.userCode.getValue();
        outputDiv.innerHTML = "";
        console.log = function(message) {
            outputDiv.innerHTML += message + "<br>";
        };
        try {
            eval(userCode);
        } catch (e) {
            console.log("Error: " + e.message);
        }
    }
}

});

class $be25f1620a50bfcc$export$f8f26dd395d7e1bd {
    static load_Links(rel, href) {
        var link = document.createElement("link");
        link.rel = rel;
        link.href = href;
        document.head.appendChild(link);
    }
    static load_Scripts(src) {
        var script = document.createElement("script");
        script.src = src;
        document.head.appendChild(script);
    }
    static load_Html(url) {
        console.log("Loading HTML...");
        fetch(url).then((response)=>response.text()).then((htmlContent)=>{
            const template = document.createElement("template");
            template.innerHTML = htmlContent.trim();
            document.body.appendChild(template.content.firstChild);
        }).catch((error)=>console.error("Error loading HTML content:", error));
    }
    static load_Ace() {
        var script = document.createElement("script");
        // Set the content of the script
        script.textContent = `
      window.Powerboost.editor = ace.edit("editor", {
        theme: "ace/theme/monokai",
        mode: "ace/mode/javascript",
      });
    `;
        // Append the script to the body
        document.body.appendChild(script);
    }
}


class $c657645b9ba500f7$export$9cf5eb8cd6a286 {
    constructor(){
        this.editor = null;
    }
    load_html(callback) {
        (0, $be25f1620a50bfcc$export$f8f26dd395d7e1bd).load_Html("https://rohinideshmukh.github.io/powerboost/src/UI_components/index.html");
        // Util.load_Html("http://localhost:8000/src/UI_components/index.html");
        console.log("HTML loaded.");
        callback();
    }
    load_urls(callback) {
        console.log("inside load_links");
        (0, $be25f1620a50bfcc$export$f8f26dd395d7e1bd).load_Links("stylesheet", "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css");
        (0, $be25f1620a50bfcc$export$f8f26dd395d7e1bd).load_Links("stylesheet", "https://rohinideshmukh.github.io/powerboost/src/UI_components/style.css");
        // Util.load_Links("stylesheet", "http://localhost:8000/src/UI_components/style.css");
        console.log("Loading scripts...");
        (0, $be25f1620a50bfcc$export$f8f26dd395d7e1bd).load_Scripts("https://rohinideshmukh.github.io/boostlet/dist/boostlet.min.js");
        (0, $be25f1620a50bfcc$export$f8f26dd395d7e1bd).load_Scripts("https://cdnjs.cloudflare.com/ajax/libs/ace/1.33.0/ace.js");
        console.log("Scripts loaded.");
    // callback();
    }
    load_aceEditor() {
        (0, $be25f1620a50bfcc$export$f8f26dd395d7e1bd).load_Ace();
    }
}



var $c6odg = parcelRequire("c6odg");
class $493837c9d7a07ecf$export$39140c7d8b0ba7b3 {
    constructor(navSelector, toggleBtnSelector){
        this.nav = document.querySelector(navSelector);
        this.toggleBtn = document.querySelector(toggleBtnSelector);
    }
    init() {
        this.toggleBtn.addEventListener("click", ()=>{
            this.nav.classList.toggle("open");
        });
        this.nav.addEventListener("mousedown", ()=>{
            this.nav.addEventListener("mousemove", this.onDrag);
        });
        this.nav.addEventListener("mouseup", ()=>{
            this.nav.removeEventListener("mousemove", this.onDrag);
        });
        this.nav.addEventListener("mouseleave", ()=>{
            this.nav.removeEventListener("mousemove", this.onDrag);
        });
        document.querySelector(".fa-solid.fa-magnifying-glass").parentNode.addEventListener("click", ()=>{
            this.toggleSpan(document.querySelector(".search-box"));
        });
        document.querySelector(".fa-regular.fa-pen-to-square").parentNode.addEventListener("click", ()=>{
            this.toggleSpan(document.querySelector(".edit-box"));
        });
        document.querySelector(".fa-sharp.fa-solid.fa-b").parentNode.addEventListener("click", ()=>{
            this.toggleSpan(document.querySelector(".rect-box"));
        });
    }
    onDrag = ({ movementX: movementX, movementY: movementY })=>{
        const navStyle = window.getComputedStyle(this.nav);
        const navTop = parseInt(navStyle.top);
        const navLeft = parseInt(navStyle.left);
        const windowHeight = window.innerHeight;
        const windowWidth = window.innerWidth;
        let newTop = navTop + movementY;
        let newLeft = navLeft + movementX;
        if (newTop < 0) newTop = 0;
        else if (newTop > windowHeight - this.nav.offsetHeight) newTop = windowHeight - this.nav.offsetHeight;
        if (newLeft < 0) newLeft = 0;
        else if (newLeft > windowWidth - this.nav.offsetWidth) newLeft = windowWidth - this.nav.offsetWidth;
        this.nav.style.top = `${newTop}px`;
        this.nav.style.left = `${newLeft}px`;
    };
    closeAllSpans() {
        document.querySelectorAll(".nav-content .search-box, .nav-content .edit-box, .nav-content .rect-box").forEach((box)=>{
            box.style.display = "none";
        });
    }
    toggleSpan(span) {
        if (span.style.display === "flex") span.style.display = "none";
        else {
            this.closeAllSpans();
            span.style.display = "flex";
        }
    }
}


class $ee836499a8d015e0$export$e1e795cef0e670e6 {
    constructor(categories, examples){
        this.categories = categories;
        this.examples = examples;
        this.containerCategories = document.querySelector(".categories");
        this.spanCategories = document.querySelector(".spanCategories");
    }
    init() {
        this.createCategoryButtons();
        this.createExampleButtons();
        this.attachEventListeners();
    }
    createButton(text, className) {
        const button = document.createElement("button");
        button.className = "rect-btn " + className;
        button.id = text;
        button.textContent = text;
        return button;
    }
    createBackArrow(className) {
        const backArrow = document.createElement("div");
        backArrow.className = "back-arrow " + className;
        const icon = document.createElement("i");
        icon.className = "fa-solid fa-arrow-left";
        backArrow.appendChild(icon);
        return backArrow;
    }
    createCategoryButtons() {
        for(let i = 0; i < this.categories.length; i += 2){
            const buttonRow = document.createElement("div");
            buttonRow.className = "button-row";
            const button1 = this.createButton(this.categories[i], this.categories[i].replace(/\s+/g, ""));
            buttonRow.appendChild(button1);
            if (i + 1 < this.categories.length) {
                const button2 = this.createButton(this.categories[i + 1], this.categories[i + 1].replace(/\s+/g, ""));
                buttonRow.appendChild(button2);
            }
            this.containerCategories.appendChild(buttonRow);
        }
    }
    createExampleButtons() {
        this.categories.forEach((category)=>{
            const containerExamples = document.createElement("div");
            containerExamples.className = "rect-box " + category.replace(/\s+/g, "");
            containerExamples.style.display = "none";
            const exampleButtons = this.examples.get(category);
            if (exampleButtons) for(let i = 0; i < exampleButtons.length; i += 2){
                const exampleRow = document.createElement("div");
                exampleRow.className = "button-row";
                const exampleButton1 = this.createButton(exampleButtons[i], "");
                exampleRow.appendChild(exampleButton1);
                if (i + 1 < exampleButtons.length) {
                    const exampleButton2 = this.createButton(exampleButtons[i + 1], "");
                    exampleRow.appendChild(exampleButton2);
                }
                containerExamples.appendChild(exampleRow);
            }
            const backArrowRow = document.createElement("div");
            backArrowRow.className = "button-row";
            const backArrow = this.createBackArrow(category.replace(/\s+/g, ""));
            backArrowRow.appendChild(backArrow);
            containerExamples.appendChild(backArrowRow);
            this.spanCategories.appendChild(containerExamples);
        });
    }
    handleButtonClick(buttonClass, divToShowClass) {
        const categoriesDiv = document.querySelector(".rect-box.categories");
        const divToShow = document.querySelector(`.rect-box.${divToShowClass}`);
        const backArrow = divToShow.querySelector(".back-arrow");
        buttonClass.addEventListener("click", ()=>{
            this.toggleVisibility(categoriesDiv, false);
            this.toggleVisibility(divToShow, true);
        });
        backArrow.addEventListener("click", ()=>{
            this.toggleVisibility(categoriesDiv, true);
            this.toggleVisibility(divToShow, false);
        });
    }
    toggleVisibility(element, show) {
        element.style.display = show ? "block" : "none";
    }
    attachEventListeners() {
        for(let i = 0; i < this.categories.length; i++){
            const categoryClass = this.categories[i].replace(/\s+/g, "");
            this.handleButtonClick(document.querySelector(`.rect-btn.${categoryClass}`), categoryClass);
        }
    }
}


class $5eee48fd03b591f2$export$4b85d3515bd863a5 {
    constructor(inputId, suggestionsContainerId, scriptsToLoad){
        this.searchInput = document.getElementById(inputId);
        this.suggestionsContainer = document.getElementById(suggestionsContainerId);
        this.scriptsToLoad = scriptsToLoad;
        this.suggestions = this.createSuggestions(scriptsToLoad);
    }
    init() {
        this.searchInput.addEventListener("input", (e)=>this.showSuggestions(e.target.value));
        this.scriptsToLoad.forEach((scriptInfo)=>this.addScriptLoadEventListener(scriptInfo));
    }
    createSuggestions(scriptsToLoad) {
        const suggestions = {};
        scriptsToLoad.forEach(({ name: name, script: script })=>{
            const key = name.charAt(0).toLowerCase();
            if (!suggestions[key]) suggestions[key] = [];
            suggestions[key].push({
                name: name,
                script: script
            });
        });
        return suggestions;
    }
    addScriptLoadEventListener(scriptInfo) {
        document.getElementById(scriptInfo.id).addEventListener("click", ()=>this.loadScript(scriptInfo.script));
    }
    showSuggestions(inputValue) {
        this.suggestionsContainer.innerHTML = "";
        let matchedSuggestions = this.getMatchedSuggestions(inputValue);
        matchedSuggestions.forEach((suggestion)=>{
            const suggestionElement = this.createSuggestionElement(suggestion);
            this.suggestionsContainer.appendChild(suggestionElement);
        });
        this.suggestionsContainer.style.display = matchedSuggestions.length > 0 ? "block" : "none";
    }
    getMatchedSuggestions(inputValue) {
        let matchedSuggestions = [];
        for(let key in this.suggestions)if (key.startsWith(inputValue.toLowerCase())) matchedSuggestions = matchedSuggestions.concat(this.suggestions[key]);
        return matchedSuggestions;
    }
    createSuggestionElement(suggestion) {
        const suggestionElement = document.createElement("div");
        suggestionElement.classList.add("suggestion-item");
        suggestionElement.textContent = suggestion.name;
        suggestionElement.onclick = ()=>{
            this.searchInput.value = suggestion.name;
            this.suggestionsContainer.innerHTML = "";
            this.loadScript(suggestion.script);
        };
        return suggestionElement;
    }
    loadScript(scriptSrc) {
        this.loadExternalScript(scriptSrc);
    }
    loadExternalScript(scriptSrc, callback) {
        const script = document.createElement("script");
        script.type = "text/javascript";
        script.src = scriptSrc;
        script.onload = ()=>{
            console.log(`${scriptSrc} has been loaded successfully.`);
            if (callback) callback();
        };
        script.onerror = ()=>{
            console.error(`Failed to load script: ${scriptSrc}`);
        };
        document.head.appendChild(script);
    }
    applySelectedFunctionality(functionalitySelectorId, functionalityScripts) {
        const selector = document.getElementById(functionalitySelectorId);
        const selectedFunctionality = selector.value;
        const scriptUrl = functionalityScripts[selectedFunctionality];
        if (scriptUrl) this.loadExternalScript(scriptUrl, ()=>{
            console.log(`${selectedFunctionality} functionality has been applied.`);
        });
        else console.error("No script URL found for selected functionality.");
    }
}


// register global namespace with a new powerboost instance
window.Powerboost = new (0, $c657645b9ba500f7$export$9cf5eb8cd6a286)();
window.console.log("Powerboost VERSION 0.1-alpha");
window.Powerboost.load_html(()=>{
    window.Powerboost.load_urls();
});
setTimeout(function() {
    window.Powerboost.load_aceEditor();
    // Initialize the Nav class
    const nav = new (0, $493837c9d7a07ecf$export$39140c7d8b0ba7b3)("nav", ".toggle-btn");
    nav.init();
    // Initialize the Editor class
    const editorInstance = new (0, $c6odg.Editor)(window.Powerboost.editor, "output", "run-btn");
    editorInstance.init();
    // Initialize the Categories class
    const categoriesInstance = new (0, $ee836499a8d015e0$export$e1e795cef0e670e6)(Boostlet.categories, Boostlet.examples);
    categoriesInstance.init();
    // Base URL for scripts
    const baseURL = "https://boostlet.org/examples/";
    // Scripts to load
    const scriptsToLoad = [
        {
            id: "Sobel",
            name: "Sobel",
            script: `${baseURL}sobel.js`
        },
        {
            id: "SAM",
            name: "Sam",
            script: `${baseURL}segmentanything.js`
        },
        {
            id: "Plotly",
            name: "Plotly",
            script: `${baseURL}plotly.js`
        },
        {
            id: "ImageCaptioning",
            name: "Image Captioning",
            script: `${baseURL}imageCaptioning.js`
        },
        {
            id: "Trako",
            name: "Tracko",
            script: `${baseURL}trako.js`
        }
    ];
    // Initialize the search class
    const searchInstance = new (0, $5eee48fd03b591f2$export$4b85d3515bd863a5)("searchInput", "suggestionsContainer", scriptsToLoad);
    searchInstance.init();
}, 1000);


//# sourceMappingURL=powerboost.min.js.map
